<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>enum PGConst: Double{
    case epsilon = 0.1
}

let PGConstants = [
    "qepsilon" : 4.5
]

struct PGBTheme {
    // top layer takes touch events
    let toucherColor = Color(white: 1.0, alpha: 0.1)
    // text layer
    let textColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
    // button states
    let activeColor = #colorLiteral(red: 0.239215686917305, green: 0.674509823322296, blue: 0.968627452850342, alpha: 1.0)
    let downColor = #colorLiteral(red: 0.925490200519562, green: 0.235294118523598, blue: 0.10196078568697, alpha: 1.0)
    let inactiveColor = #colorLiteral(red: 0.803921580314636, green: 0.803921580314636, blue: 0.803921580314636, alpha: 1.0)
}

class PGButton{
    private let epsilon = PGConst.epsilon.rawValue
    
    private var backer = Circle(radius: 1)
    private var title = Text(string: "Button")
    private var toucher = Circle(radius: 1)
    
    var activeState = true
    
    private var internalTheme = PGBTheme()
    var theme : PGBTheme{
        get{ return internalTheme }
        set{
            internalTheme = newValue
            toucher.color = theme.toucherColor
            colorChange(theme.activeColor)
            title.color = theme.textColor
        }
    }
    
    var radius : Double {
        get{ return backer.radius }
        set{ 
            backer.radius = newValue
            toucher.radius = newValue + epsilon
        }
    }
    
    var center : Point{
        get{return backer.center}
        set{
            backer.center = newValue
            title.center = newValue
            toucher.center = newValue
        }
    }
    
    var string : String {
        get{return title.string}
        set{ title.string = newValue }
    }
    
    init(){
        onTouchDown {}
        onTouchUp {}
    }
    
    convenience init(radius newRadius: Double, center newCenter: Point, string newString: String, theme newTheme: PGBTheme){
        self.init()
        center = newCenter
        theme = newTheme
        radius = newRadius
        string = newString
    }
    
    func checkActive(){
        if activeState{
            colorChange(theme.activeColor)
        } else {
            colorChange(theme.inactiveColor)
        }
    }
    
    func onTouchDown(_ code: @escaping ()-&gt;()){
        toucher.onTouchDown { 
            if self.activeState{
                self.colorChange(self.theme.downColor)
                code()
            }
        }
    }
    
    func onTouchUp(_ code: @escaping ()-&gt;()){
        toucher.onTouchUp { 
            if self.activeState{
                self.colorChange(self.theme.activeColor)
                code()
            }
        }
    }
    
    func colorChange(_ newColor: Color){
        animate(duration: 0.5, delay: 0){
            self.backer.color = newColor
        }
        
    }
    
    func activate() {
        self.activeState = true
        checkActive()
    }
    func deactivate() {
        self.activeState = false
        checkActive()
    }
    func toggle() {
        self.activeState = !activeState
        checkActive()
    }
    
    func resize(radius newRadius: Double){
        backer.scale = newRadius
        toucher.scale = newRadius + epsilon
    }
}

// ---- ---- ---- ---- ---- ---- ----

var buttonA = PGButton(radius: 5, center: Point(x: -10, y: 3), string: "A", theme: PGBTheme())

var buttonB = PGButton(radius: 5, center: Point(x: 10, y: 3), string: "B", theme: PGBTheme())

var indicatorLight = Circle(radius: 4)
indicatorLight.center = Point(x: 0, y: 10)

var indicatorValue = false

buttonA.onTouchUp {
    buttonB.toggle()
}

buttonB.onTouchDown {
    indicatorValue = !indicatorValue
    
    if indicatorValue {
        indicatorLight.color = #colorLiteral(red: 0.466666668653488, green: 0.764705896377563, blue: 0.266666680574417, alpha: 1.0)
    } else {
        indicatorLight.color = #colorLiteral(red: 0.807843148708344, green: 0.0274509806185961, blue: 0.333333343267441, alpha: 1.0)
    }
}
</string>
			<key>ModifiedRange</key>
			<string>{283, 3986}</string>
			<key>OriginalContent</key>
			<string>let circle = Circle()
circle.draggable = true

</string>
			<key>OriginalRange</key>
			<string>{283, 47}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Shapes.playgroundchapter/Pages/Canvas.playgroundpage/Contents.swift</string>
</dict>
</plist>
